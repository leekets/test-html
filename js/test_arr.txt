var url = location.href;
var theRequest = new Object();
var paraString = url.substring(url.indexOf("?") + 1, url.length).split("&");
if (url.indexOf("?") != -1) {
	for (var i = 0; i < paraString.length; i++) {
		theRequest[paraString[i].split("=")[0]] = unescape(paraString[i].split("=")[1]);
	}
}


pid=theRequest["id"];

var arr;
arr=theRequest["arr"];
//alert(arr.length);
//pid=299;
var bothPage="asp";
var jumpUrl="jump.html?id="+pid;
var audioUrl="";
var comments=[];
if (typeof(arr)!="undefined" && arr!=""){
	arr=arr.split(",");
	for(var iArr=0, lenArr=arr.length; iArr<lenArr; iArr++){
		for(var i=0, len=newsJSON.length; i<len; i++){
			if(newsJSON[i].id==arr[iArr]){
				comments.push(newsJSON[i]);
			}	
		}
	}
}else{
	for(var i=0, len=newsJSON.length; i<len; i++){
		if(newsJSON[i].categoryId==pid){
			comments.push(newsJSON[i]);
		}	
	}
}


$(function() {
	var dNum= 0;	
	var testSize=5;
	var c_audio=1;
	var c_jump=1;
	var c_random=1;
	
	var get_c_random=theRequest["c_random"];
	if((typeof(get_c_random)!="undefined" && get_c_random!="")){
		c_random=get_c_random;	
	}
	var get_testSize=theRequest["testSize"];
	if((typeof(get_testSize)!="undefined" && get_testSize!="")){
		testSize=get_testSize;	
	}
	
	if (c_random==1){comments=randomOrder(comments)};
	comments=f_control_num2(testSize,comments,testSize);
    var t1 = new Date().getTime(); // 初始化时间
    // 数组指针初始化；
    var index = 0;
    var index_ = "";
    

    var errors = []; // 错误返回按钮延时时间；
    var eNum = 0; // 错误计数初始化；
    // 显示全局
    $("#ul").show();

    // 调试开关；
    var debug = "0";
    if (debug == "1") {
        dNum = 0;
    }

    act(); // 进入函数act
	
function act() {
		//分段重复函数
		
//	alert(index+":"+eNum);
//	if(rNum==0){
//		if ((index <= 5 && eNum == 3)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }
//        if ((index > 5 && index <= 10 && eNum == 5)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }
//        if ((index > 10 && index <= 15 && eNum == 7)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }
//        if ((index > 15 && index <= 20 && eNum == 9)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }
//        if ((index > 20 && index <= 25 && eNum == 11)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }
//        if ((index > 25 && index <= 30 && eNum == 13)) {
//
//            alert("Repeat");
//            index = 0;
//            //			var index_ = "";
//            errors = [];
//            eNum = 0;
//            $("span.sp3").html(eNum);
//
//        }//	}

if (index<comments.length) {					//如果指针在范围内；
			$(".e_element").hide();				//隐藏所有元素；
			$(".en").html("");					//初始化英文部分；
			$(".cn").html("");					//初始化中文部分；
//			sen1(comments[index]['a']);			//调用句库函数；
			$("span.sp1").html(index+1);		//调整当前数值；
			$("span.sp2").html(comments.length);//显示总数；

			$("lib.b").show();					//输入框显示		
			$("textarea.b").val("");			//输入框清空			
			
			q=comments[index]['q'];
			q_en=comments[index]['q_en'];
			if(q_en==""){
				q_en=q;
			}
			btnQ="Submit";
			s_audio="";
			s_audio=comments[index]['subTitle']+".mp3";
			$("audio").attr({"src": ""});
			$("audio").attr({"src": "../audio/"+s_audio});
			audio=document.getElementById('player') //初始化音频路径
			$(".q_en").html(q_en);//问题区赋值
			$(".q").html(comments[index]['subject']);//问题区赋值
			$(".a .a").html(comments[index]['subTitle']);//答案区赋值
			$(".sen .en").html(comments[index]['en']);//问题区赋值
			$(".sen .cn").html(comments[index]['cn']);//答案区赋值
			$(".btnQ").html(btnQ);
			$(".e_act1").show();				//显示：act1元素；

//			play3(1);
			$("textarea.b")[0].focus();			//输入框焦点
			
            index++;							//指针递进
        }
		else{
			if(errors.length > 0){				//数组【错误列表】不为空
				comments = errors;				//题库赋值错误列表
				errors = [];					//清空：错误列表；
				index = 0;						//初始化：指针
				eNum = 0;						//初始化：错误计数
				$("span.sp3").html('');			//清空：页面错误计数
				act();							//运行函数；
			}else{
				t2=new Date().getTime()-t1;
				alert(MillisecondToDate(t2));	
				window.location=jumpUrl;
				//window.location="index."+bothPage+"#pid"+pid;
			}
		}

    }		
	function act2(){
		
//		$(".sharewith.a").hide();
//		$(".sharewith.e").hide();
//		$(".sharewith.en").hide();
//		$(".sharewith.cn").hide();
//		$("div.lib").show();
//		$("a.btnP").hide();
//		$("a.btn2").hide();
//		$("a.btn3").show();	
//		$("btnP").hide();	
		$(".e_element").hide();				//隐藏所有元素；
		$("textarea.b").val("");
		$(".e_act2").show();				//显示：act2元素；
		$("textarea.b")[0].focus();	


	}	
	function act3(){
		$(".e_element").hide();				//隐藏所有元素；
		$(".sharewith.a").show();
		$(".sharewith.e .e").html($("textarea.b").val());
//		$(".sharewith.e").show();
//		$(".sharewith.en").show();
//		$(".sharewith.cn").show();
		$("textarea.b").val("");
//		$("div.lib").hide();
//		$("a.btn1").hide();
		$("a.btnP").show();
		if(c_audio==1){
			audio=document.getElementById('player');			
			play(0,3);	//错误后重复3次
		}
		//audio.play();
		$(".e_act3").show();				//显示：act3元素；
		$("a.btn2").hide().delay(dNum).fadeIn();
		$("a.btn3").hide();	


	}	
	$("a.btnCn").click(function(){
		$(".sharewith .q").parent().show();
		
	});	
    $("a.btn1").click(function() {
		$(".f_slipt").hide();
        if ($("textarea.b").val().replace(/>/g,"&gt;").toLowerCase() == $(".a .a").html().toLowerCase()) {
				act();
        } else {
				act3();
				eNum+=1
				errors.push(comments[index-1]);
	//			console.log(errors);
	//			if(index_==""){index_=comments[index-1]['id']}else{index_+=","+comments[index-1]['id']};
				$("span.sp3").html(eNum);
			
        };
    });	
	$("a.btn2").click(function() {
		act2()		
	});	
    $("a.btn3").click(function() {
        if ($("textarea.b").val().replace(/>/g,"&gt;").toLowerCase() == $(".a .a").html().toLowerCase()) {
			act()
        } else {
			act3()
        };
    });	
	$("a.f_slipt").click(function(){
		Arrsplit($(this).attr("num"));
	});    
function MillisecondToDate(msd) {
    var time = parseFloat(msd) / 1000;
    if (null != time && "" != time) {
        if (time > 60 && time < 60 * 60) {
            time = parseInt(time / 60.0) + "分钟" + parseInt((parseFloat(time / 60.0) - parseInt(time / 60.0)) * 60) + "秒";
        } else if (time >= 60 * 60 && time < 60 * 60 * 24) {
            time = parseInt(time / 3600.0) + "小时" + parseInt((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60) + "分钟" + parseInt((parseFloat((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60) - parseInt((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60)) * 60) + "秒";
        } else {
            time = parseInt(time) + "秒";
        }
    }
    return time;
}
})
function Arrsplit(s) {
    //s1=0+(s-1)*10;
    //alert(s);
    var x = 5;
    var comments2 = [];
    for (var i = (s - 1) * x, len = s * x; i < len; i++) {
        comments2.push(comments[i]);
    }
    comments = comments2; //题库赋值错误列表
    errors = []; //清空：错误列表；
    index = 0; //初始化：指针
    eNum = 0; //初始化：错误计数
    $("span.sp3").html(''); //清空：页面错误计数	
    act(); //运行函数；	
    $(".f_slipt").hide();
}

function sen1(a) {
    for (x in senJSON) {
        if (senJSON[x].en != null) {
            if (a.toLowerCase().indexOf(senJSON[x].en.toLowerCase()) >= 0) {
            	$(".f_en").html(a.replace(senJSON[x].en,'<span class="font_red">'+senJSON[x].en+'</span>'));
                $(".f_cn").html(senJSON[x].cn);
                break;
            }
        }
    }
}



//计算总时间
function MillisecondToDate(msd) {
    var time = parseFloat(msd) / 1000;
    if (null != time && "" != time) {
        if (time > 60 && time < 60 * 60) {
            time = parseInt(time / 60.0) + "分钟" + parseInt((parseFloat(time / 60.0) - parseInt(time / 60.0)) * 60) + "秒";
        } else if (time >= 60 * 60 && time < 60 * 60 * 24) {
            time = parseInt(time / 3600.0) + "小时" + parseInt((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60) + "分钟" + parseInt((parseFloat((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60) - parseInt((parseFloat(time / 3600.0) - parseInt(time / 3600.0)) * 60)) * 60) + "秒";
        } else {
            time = parseInt(time) + "秒";
        }
    }
    return time;
}

//随机改变数组的排序
function randomOrder(targetArray) {
    var arrayLength = targetArray.length
    var tempArray1 = new Array(); //先创建一个正常顺序的数组
    for (var i = 0; i < arrayLength; i++) {
        tempArray1[i] = i
    }
    var tempArray2 = new Array();	//再根据上一个数组创建一个随机乱序的数组
    for (var i = 0; i < arrayLength; i++) {
        tempArray2[i] = tempArray1.splice(Math.floor(Math.random() * tempArray1.length), 1)	//从正常顺序数组中随机抽出元素
    }
    var tempArray3 = new Array();	//最后创建一个临时数组存储 根据上一个乱序的数组从targetArray中取得数据
    for (var i = 0; i < arrayLength; i++) {
        tempArray3[i] = targetArray[tempArray2[i]]
    }
    return tempArray3	//返回最后得出的数组
    //使用实例
    // var tmp = ["1", "2", "3", "4"];
    // alert(randomOrder(tmp));
}

//打印数组
function print_array(arr) {
    var t = 'array(\n';
    for (var key in arr) {
        if (typeof(arr[key]) == 'array' || typeof(arr[key]) == 'object') {
            var t_tmp = key + ' = ' + print_array(arr[key]);
            t += '\t' + t_tmp + '\n';
        } else {
            var t_tmp = key + ' = ' + arr[key];
            t += '\t' + t_tmp + '\n';
        }
    }
    t = t + ')';
    return t;;
}

function f_control_num(num,comments){
	if(num>0){
		var comments2 = [];
		for(i=0;i<=testSize-1;i++){
			comments2.push(comments[i]);
		}
		comments = comments2;
	}
	return comments;
}

function f_control_repeat(num_base,num_max,index){
	if(index<=num_max){
		var r_n = num_base;
		var r_2 = eval((parseInt((index-1)/5)+1)*r_n)
		if(index <= r_2*1 && eNum==eval(r_2*0.4+1)){
			index = -1;
		}		
	}
	return index;
}

function f_select(org_comments,s_num,f_chrome){
	var arrSelect=[];	//定义select数组；
	for(var i=0, len=org_comments.length; i<len; i++){	//取出当前指针的值。（同时取出与当前指正重复的值。）
		if(org_comments[i]['subTitle']!=comments[index]['subTitle']){
			arrSelect.push(org_comments[i]);
		}	
	}
	arrSelect=randomOrder(arrSelect);	//乱序数组
	

	var arrSelect2 = [];	//定时数组2

	//select num
	var s_num=s_num-2;
	for(i=0;i<=s_num;i++){	//获得目标数组-1的新数组
		arrSelect2.push(arrSelect[i]);
	}
	arrSelect2.push(comments[index]);	//新数组添加当前指针的值。
	arrSelect = randomOrder(arrSelect2);	//乱序数组。

	$(".f_btnSelect").hide();
	for(i=0;i<=s_num+1;i++){
		$(".f_btnNo"+(i+1)).html(arrSelect[i].subject); //赋值
		$(".f_btnNo"+(i+1)).attr("f_a",arrSelect[i].subTitle);
		if(f_chrome==1){
			$(".f_btnNo" + (i + 1)).prepend("<span class='label' style='width:130px !important;'>[" + $(".f_btnNo" + (i + 1)).attr("id") + "]</span>&nbsp;");
		}
		$(".f_btnNo"+(i+1)).show();
	}	
}

